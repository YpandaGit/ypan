{
  "filename": "1.md",
  "__html": "<h1>手写Spring核心功能第一篇：IOC与DI</h1>\n<h2>说明</h2>\n<p>​    Spring核心功能基本可以划分为三个，即IOC，DI与AOP。本文则着手于实现简易得到IOC与DI，AOP在在另一篇文章中单独实现。</p>\n<h2>注解类</h2>\n<ul>\n<li>YComponent</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> indi.yp.annotation;\n\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.Documented;\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.Retention;\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.RetentionPolicy;\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.Target;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@ClassName</span>: YComponent\n * <span class=\"hljs-doctag\">@author</span> yPan\n */</span>\n<span class=\"hljs-meta\">@Documented</span>\n<span class=\"hljs-meta\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class=\"hljs-meta\">@Target</span>(ElementType.TYPE)\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> YComponent {\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> \"\"</span>;\n}\n</code></pre>\n<ul>\n<li>YAutowried</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> indi.yp.annotation;\n\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.Documented;\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.Retention;\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.RetentionPolicy;\n<span class=\"hljs-keyword\">import</span> java.lang.annotation.Target;\n\n<span class=\"hljs-comment\">/** \n* <span class=\"hljs-doctag\">@ClassName</span>: YAutowired \n* <span class=\"hljs-doctag\">@author</span> yPan  \n*/</span>\n<span class=\"hljs-meta\">@Documented</span>\n<span class=\"hljs-meta\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class=\"hljs-meta\">@Target</span>(ElementType.FIELD)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> YAutowired {\n\n}\n</code></pre>\n<h2>普通组件</h2>\n<ul>\n<li>ComponentA</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> indi.yp.component;\n\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n\n<span class=\"hljs-keyword\">import</span> indi.yp.annotation.YComponent;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@ClassName</span>: ComponentA\n * <span class=\"hljs-doctag\">@author</span> yPan\n */</span>\n<span class=\"hljs-meta\">@YComponent</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ComponentA</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(ComponentA.class);\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">say</span><span class=\"hljs-params\">()</span> </span>{\n        LOGGER.info(<span class=\"hljs-string\">\"A.say!\"</span>);\n    }\n}\n</code></pre>\n<ul>\n<li>ComponentB</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> indi.yp.component;\n\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n\n<span class=\"hljs-keyword\">import</span> indi.yp.annotation.YAutowired;\n<span class=\"hljs-keyword\">import</span> indi.yp.annotation.YComponent;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@ClassName</span>: ComponentB\n * <span class=\"hljs-doctag\">@author</span> yPan\n */</span>\n<span class=\"hljs-meta\">@YComponent</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ComponentB</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(ComponentB.class);\n    <span class=\"hljs-meta\">@YAutowired</span>\n    <span class=\"hljs-keyword\">private</span> ComponentA componentA;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">say</span><span class=\"hljs-params\">()</span> </span>{\n        componentA.say();\n        LOGGER.info(<span class=\"hljs-string\">\"B.say!\"</span>);\n    }\n\n}\n</code></pre>\n<h2>核心实现</h2>\n<ul>\n<li>实现逻辑-大纲说明</li>\n</ul>\n<pre><code class=\"language-mermaid\">graph TB\nscan[扫描包] --&gt; saveClass[保存所有class集合]\nsaveClass[保存所有class集合] --&gt; IOC[创建IOC容器]\nIOC[创建IOC容器] --&gt;DI[依赖注入]\n</code></pre>\n<ul>\n<li>变量说明</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 扫描包的路径</span>\nString packageName = <span class=\"hljs-string\">\"indi.yp\"</span>;\n<span class=\"hljs-comment\">// 所有类的集合</span>\nList&lt;String&gt; clazzs = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n<span class=\"hljs-comment\">// IOC容器</span>\nMap&lt;String, Object&gt; ioc = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n</code></pre>\n<ol>\n<li>扫描包并且保存class集合</li>\n</ol>\n<pre><code class=\"language-java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doScan</span><span class=\"hljs-params\">(String packageName, List&lt;String&gt; clazzs)</span> </span>{\n        String path = Application.class.getResource(<span class=\"hljs-string\">\"/\"</span> + packageName.replaceAll(<span class=\"hljs-string\">\"\\\\.\"</span>, <span class=\"hljs-string\">\"/\"</span>)).getPath();\n        LOGGER.info(<span class=\"hljs-string\">\"path:{}\"</span>, path);\n        File file = <span class=\"hljs-keyword\">new</span> File(path);\n        <span class=\"hljs-keyword\">for</span> (File tmp : file.listFiles()) {\n            <span class=\"hljs-keyword\">if</span> (tmp.isDirectory()) {\n                doScan(packageName + <span class=\"hljs-string\">\".\"</span> + tmp.getName(), clazzs);\n            } <span class=\"hljs-keyword\">else</span> {\n                clazzs.add(packageName + <span class=\"hljs-string\">\".\"</span> + StringUtils.replace(tmp.getName(), <span class=\"hljs-string\">\".class\"</span>, <span class=\"hljs-string\">\"\"</span>));\n            }\n\n        }\n\n    }\n</code></pre>\n<ol start=\"2\">\n<li>创建IOC容器</li>\n</ol>\n<pre><code class=\"language-java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doIoc</span><span class=\"hljs-params\">(List&lt;String&gt; clazzs, Map&lt;String, Object&gt; ioc)</span> </span>{\n        clazzs.forEach(x -&gt; {\n            <span class=\"hljs-keyword\">try</span> {\n                Class&lt;?&gt; clazz = Class.forName(x);\n                <span class=\"hljs-comment\">// 被YComponent注解了</span>\n                <span class=\"hljs-keyword\">if</span> (clazz.isAnnotationPresent(YComponent.class)) {\n                    YComponent yComponent = clazz.getAnnotation(YComponent.class);\n                    LOGGER.info(<span class=\"hljs-string\">\"clazz.name:{},component.value:{}\"</span>, clazz.getSimpleName(), yComponent.value());\n                    <span class=\"hljs-keyword\">try</span> {\n                        Object instance = clazz.newInstance();\n                        <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(yComponent.value())) {\n                            ioc.put(lowwerFirstLetter(clazz.getSimpleName()), instance);\n                        } <span class=\"hljs-keyword\">else</span> {\n                            ioc.put(lowwerFirstLetter(clazz.getSimpleName()), instance);\n                            ioc.put(yComponent.value(), instance);\n                        }\n                    } <span class=\"hljs-keyword\">catch</span> (InstantiationException e) {\n                        LOGGER.error(e.getMessage(), e);\n                    } <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) {\n                        LOGGER.error(e.getMessage(), e);\n                    }\n                }\n\n            } <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) {\n                LOGGER.error(e.getMessage(), e);\n            }\n\n        });\n\n    }\n</code></pre>\n<ol start=\"3\">\n<li>实现依赖注入</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doAutowired</span><span class=\"hljs-params\">(Map&lt;String, Object&gt; ioc)</span> </span>{\n        ioc.forEach((x, y) -&gt; {\n            Field[] fields = y.getClass().getDeclaredFields();\n            <span class=\"hljs-keyword\">for</span> (Field field : fields) {\n                <span class=\"hljs-comment\">// 被YAutowired注解了</span>\n                <span class=\"hljs-keyword\">if</span> (field.isAnnotationPresent(YAutowired.class)) {\n                    Object obj = <span class=\"hljs-keyword\">null</span>;\n                    <span class=\"hljs-keyword\">if</span> (ioc.containsKey(field.getName())) {\n                        obj = ioc.get(field.getName());\n                    } <span class=\"hljs-keyword\">else</span> {\n                        obj = ioc.get(lowwerFirstLetter(field.getType().getSimpleName()));\n                    }\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == obj) {\n                        LOGGER.warn(<span class=\"hljs-string\">\"class :{} can not find component : {}\"</span>, y.getClass(), field.getName());\n                        <span class=\"hljs-keyword\">return</span>;\n                    }\n\n                    <span class=\"hljs-keyword\">try</span> {\n                        <span class=\"hljs-comment\">// 暴力访问私有属性</span>\n                        field.setAccessible(<span class=\"hljs-keyword\">true</span>);\n                        field.set(y, obj);\n                    } <span class=\"hljs-keyword\">catch</span> (IllegalArgumentException e) {\n                        LOGGER.error(e.getMessage(), e);\n                    } <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) {\n                        LOGGER.error(e.getMessage(), e);\n                    }\n                }\n            }\n\n        });\n\n    }\n</code></pre>\n<ol start=\"4\">\n<li>首字母小写</li>\n</ol>\n<pre><code class=\"language-java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">lowwerFirstLetter</span><span class=\"hljs-params\">(String s)</span> </span>{\n        <span class=\"hljs-keyword\">char</span>[] chars = s.toCharArray();\n        String firstChar = String.valueOf(chars[<span class=\"hljs-number\">0</span>]);\n        chars[<span class=\"hljs-number\">0</span>] = firstChar.toLowerCase().charAt(<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">// 转小写</span>\n        LOGGER.info(<span class=\"hljs-string\">\"s:{},return:{}\"</span>, s, String.valueOf(chars));\n        <span class=\"hljs-keyword\">return</span> String.valueOf(chars);\n    }\n</code></pre>\n<h2>总结说明</h2>\n<ul>\n<li>代码</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 扫描包</span>\ndoScan(packageName, clazzs);\nLOGGER.info(<span class=\"hljs-string\">\"clazzs:{}\"</span>, JSONObject.toJSONString(clazzs));\n<span class=\"hljs-comment\">// IOC容器</span>\ndoIoc(clazzs, ioc);\nLOGGER.info(<span class=\"hljs-string\">\"ioc:{}\"</span>, JSONObject.toJSONString(ioc));\n<span class=\"hljs-comment\">// autowired</span>\ndoAutowired(ioc);\n<span class=\"hljs-comment\">// test</span>\nComponentB componentB = (ComponentB) ioc.get(<span class=\"hljs-string\">\"componentB\"</span>);\ncomponentB.say();\n</code></pre>\n",
  "link": "\\zh-cn\\blog\\java\\1.html",
  "meta": {
    "title": "手写Spring核心功能第一篇：IOC与DI",
    "keywords": "Spring,IOC,DI"
  }
}